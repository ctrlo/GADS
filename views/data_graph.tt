[% IF page_as_mech %]
    <div id="chartdiv" style="height:400px;width:600px; "></div>
[% ELSE %]
    [% count = 0 %]
    [% FOREACH graph IN graphs %]
        [% NEXT UNLESS graph.selected %]
        <div>
            <h3>[% graph.title | html_entity %]</h3>
            [% IF graph.description %]<p>[% graph.description | html_entity %]</p>[% END %]
            <div id="chartdiv[% graph.id %]" style="height:400px;width:600px; "></div>
            <p><a href="?png=[% graph.id %]">PNG</a> | <a href="?csv=[% graph.id %]">CSV</a></p>
        </div>
        [% count = count + 1 %]
    [% END %]

    [% UNLESS count %]
    <p>No graphs are selected for display. Please use the
    <a href="[% url.page %]/account/graph/">Select graphs</a> button above to add graphs for display.</p>
    [% END %]
[% END %]

    <script type="text/javascript">
        var jscode='[% FILTER remove('\n+') %]
            [% FILTER replace('\'', '\\\'') %]
            function do_plot_json(plotData, options_in) {
                plotData = JSON.parse(plotData);
                options_in = JSON.parse(options_in);
                do_plot(plotData, options_in);
            };
            function do_plot (plotData, options_in) {
                var ticks = plotData.xlabels;
                var seriesDefaults;
                var plotOptions = {};
                var showmarker = (options_in.type == "line" ? true : false);
                plotOptions.highlighter =  {
                    showMarker: showmarker,
                    tooltipContentEditor: function(str, pointIndex, index, plot){
                       return  plot._plotData[pointIndex][index][1];
                    },
                };
                if (options_in.type == "bar") {
                    plotOptions.seriesDefaults = {
                        renderer:$.jqplot.BarRenderer,
                        rendererOptions: {
                            shadow: false,
                            fillToZero: true,
                            barMinWidth: 10
                        },
                        pointLabels: {
                            show: false,
                            hideZeros: true
                        }
                    };
                } else if (options_in.type == "donut") {
                    plotOptions.seriesDefaults = {
                        renderer:$.jqplot.DonutRenderer,
                        rendererOptions: {
                            sliceMargin: 3,
                            showDataLabels: true,
                            dataLabels: 'value',
                            shadow: false
                        }
                    };
                } else if (options_in.type == "pie") {
                    plotOptions.seriesDefaults = {
                        renderer:$.jqplot.PieRenderer,
                        rendererOptions: {
                            showDataLabels: true,
                            dataLabels: 'value',
                            shadow: false
                        }
                    };
                } else {
                    plotOptions.seriesDefaults = {
                        pointLabels: {
                            show: false
                        }
                    };
                }
                if (options_in.type != "donut" && options_in.type != "pie") {
                    plotOptions.series = plotData.labels;
                    plotOptions.axes = {
                        xaxis: {
                            renderer: $.jqplot.CategoryAxisRenderer,
                            ticks: ticks,
                            label: options_in.x_axis_name,
                            labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                        },
                        yaxis: {
                            label: options_in.y_axis_label,
                            labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                        }
                    };
                    if (plotData.options.y_max) {
                        plotOptions.axes.yaxis.max = plotData.options.y_max;
                    }
                    if (plotData.options.is_metric) {
                        plotOptions.axes.yaxis.tickOptions = {
                            formatString: '%d%'
                        };
                    }
                    plotOptions.axesDefaults = {
                        tickRenderer: $.jqplot.CanvasAxisTickRenderer ,
                        tickOptions: {
                          angle: -30,
                          fontSize: '8pt'
                        }

                    };
                }
                plotOptions.stackSeries = options_in.stackseries;
                plotOptions.legend = {
                    renderer:$.jqplot.EnhancedLegendRenderer,
                    show: options_in.showlegend,
                    location: 'e',
                    placement: 'outside'
                };
                $.jqplot('chartdiv' [% UNLESS page_as_mech %]+ options_in.id[% END %], plotData.points, plotOptions);
            };
            [% UNLESS page_as_mech %]
                $(document).ready(function(){
                    if (!FontDetect.isFontLoaded('14px/1 FontAwesome')) {
                        $( ".use-icon-font" ).hide();
                        $( ".use-icon-png" ).show();
                    }
                    var ajaxDataRenderer = function(url, plot) {
                        var ret = null;
                        $.ajax({
                            async: false,
                            url: url,
                            dataType:'json',
                            success: function(data) {
                                ret = data;
                            }
                        });
                        return ret;
                    };
                    $.jqplot.config.enablePlugins = true;
                    [% FOREACH graph IN graphs %]
                        [% NEXT UNLESS graph.selected %]
                        var time = (new Date).getTime();
                        var jsonurl = "/data_graph/[% graph.id %]/" + time;
                        var plotData = ajaxDataRenderer(jsonurl);
                        var options_in = {
                            type: "[% graph.type %]",
                            x_axis_name: "[% graph.x_axis_name | replace('"', '\\\"') %]",
                            y_axis_label: "[% graph.y_axis_label | replace('"', '\\\"') %]",
                            stackseries: [% graph.stackseries %],
                            showlegend: [% IF graph.showlegend %]true[% ELSE %]false[% END %],
                            id: [% graph.id %]
                        };
                        do_plot(plotData, options_in);
                    [% END %]
                });
            [% END %]
            [% END %]
        [% END %]';
    </script>
