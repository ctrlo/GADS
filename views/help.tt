[% global.helptext.limit_user_data = BLOCK %]
By default, a user can see any record in Linkspace, and is only limited to what fields of that record he or she can view. This option makes it possible to also limit the records that a user can view. By selecting a view in the dropdown box, a user can only ever see records that meet the search criteria of that view (of the view's particular table), regardless of what other search criteria or views they may make themselves. By selecting multiple views, a user will only be able to see records contained in any of the listed views. Note that the limitation only applies to the particular table of the view(s). So if only View A from Table A is selected, the user will be limited to only View A's records in Table A, but will be able to see any record in Table B.
[% END %]

[% global.helptext.layout_groups = BLOCK %]
<p>Permissions allow you to specify the access a user has to this field.
Using these settings, you can assign everything from full access for a
particular group of users, to preventing other users knowing that the field
even exists. By default, no groups are assigned to a field, meaning that
no users can view it (including full administrators).</p>

<p>Only groups can be used to assign permissions, so a group must first be
created and users added to that group. A new permission can then be created
for the group, specifying the access that the group has.</p>

<p>Permissions that can be applied are as follows:</p>
<h5>Read values</h5>
<p>User can see the field and its data.</p>
<h5>Enter values for new records</h5>
<p>User can enter data for this field when creating a new record.</p>
<h5>Edit values of existing records</h5>
<p>User can edit values of this field in existing records.</p>
<h5>Approve values in new records</h5>
<p>If requiring approval for data edits from some users, this permission
allows other users to approve the values for new records.</p>
<h5>Approve changes in existing records</h5>
<p>If requiring approval for data edits from some users, this permission
allows other users to approve the values for existing records.</p>
<h5>Enter values for new records without requiring approval</h5>
Allows users to enter values for new records, without requiring those
values to be approved.</p>
<h5>Edit values of existing records without requiring approval</h5>
Allows users to edit values in existing records, without requiring those
values to be approved.</p>
[% END %]

[% global.helptext.force_regex = BLOCK %]
<p>Use this option to force a value to be in a particular format.
Enter a regular expression here to define the format.
<p>To force input of data to contain the word "foo":</p>
<tt><pre>.*foo.*</pre></tt>
<p>To force input of data to be anything beginning with "bar":</p>
<tt><pre>bar.*</pre></tt>
<p>To force input of data to be a single letter followed by any number:</p>
<tt><pre>[A-Za-z][0-9]+</pre></tt>
[% END %]

[% global.helptext.layout_perms = BLOCK %]
The permissions of the field affect the ability of users to specify
the values in records, not change any aspect of the layout. Specifically:

<h4>Open access</h4>
<ul>
    <li>Allows anyone who has "user can update records" permissions to change the
    value of the field. Users without any permissions cannot change the value.
    </li>
</ul>
<h4>Edit with approval</h4>
<ul>
    <li>Allows anyone who has "user can update records" permissions to
        submit a new value, but any such change will be held for approval.</li>
    <li>Allows anyone who has "user does not need approval when updating records"
    to change the value immediately.</li>
    <li>Users without any permissions cannot change the value.</li>
</ul>
<h4>Read only</h4>
<ul>
    <li>Allows anyone who has "user does not need approval when updating records"
    to change the value immediately.</li>
    <li>All other users cannot change the value.</li>
</ul>
[% END %]

[% global.helptext.layout_match = BLOCK %]
<p>For an exact match, enter the required text. For any other type of
match, enter a Regular Expression (see examples below). Values of tree
nodes are rendered as their full path, concatenated with a hash (for
example "Level 1#Level 2#Node value").</p>
<p>To match any non-blank value:</p>
<tt><pre>.+</pre></tt>
<p>To match any of three values "val1", "val2" or "val3 (comment)":</p>
<tt><pre>(val1|val2|val3 \(comment\))</pre></tt>
<p>To match a value containing the word "foo":</p>
<tt><pre>.*foo.*</pre></tt>
<p>To match anything beginning with "bar":</p>
<tt><pre>bar.*</pre></tt>
<p>To match any number:</p>
<tt><pre>[0-9]+</pre></tt>
<p>To match only the node value of a tree, not including its path:</p>
<tt><pre>(.*#)?Node name</pre></tt>

[% END %]

[% global.helptext.name_short = BLOCK %]
<p>The short name is used to refer to fields within calculated and RAG fields.
Although optional, it must be specified if this field is to be used within a
calculated or RAG field. The short name must be unique, must start with a
letter, and is only allowedcontain letters, numbers and underscores.</p>

[% END %]

[% global.helptext.layout_calc = BLOCK %]
<h5>Introduction</h5>
<p>Calculated fields (including RedAmberGreen fields) can be used to automatically generate values based on
other fields. Basic <a href="https://www.lua.org/pil/contents.html">Lua
programming style</a> can be used, with the value that is returned being used
for the value of the field.</p> <p>The defined code should consist of a
function called <code>evaluate</code> with parameters as the values required
from other fields. Values from other fields are used by defining a short name
for the field and then inserting that short name into the function name as per
the examples below. The short name for a field is defined by editing the field
and entering a value into the &quot;Short name&quot; parameter.</p> <p>Note
that only a subset of the Lua language is available for use. For full details,
please see the manual.</p>

<h5>Using different field types</h5>
<p>Values in <em>date fields</em> are passed as Lua table values with
the indexes year, month, day and epoch.  <em>Date ranges</em> are also
passed as Lua tables with the index &quot;from&quot; and &quot;to&quot; which
contain tables as per a date field.</p> <p><em>Tree values</em> are
passed as Lua table values with the indexes &quot;value&quot; and
&quot;parents&quot;, the former containing the actual value and the latter
being another table containing all the node's parents (starting at
&quot;parent1&quot; for the top level and continuing sequentially as
required).</p> <p>The <em>ID of the record</em> can be accessed using the
special short name &quot;_id&quot;.</p> <p>The <em>user that last updated the
record</em> can be accessed using the special short name
&quot;_version_user&quot;, which will be returned as a table with the keys:
firstname, surname, email, organisation and text. The organisation
will be returned with the keys id and name.

<h5>Return values</h5>
<p>Return values for RedAmberGreen fields should be the string &quot;red&quot;,
&quot;amber&quot; or &quot;green&quot;. It is also permissable to return
nothing, which will be interpreted as a grey value. Any other values, or code
causing errors, will display purple.</p>
<p>In order for a calculated value to behave as expected (such as sorting and
searching correctly), it's important that Linkspace knows what value it is
returning. The type of value can specified using the &quot;Return value
conversion&quot; option. In the case of a date, the value returned from the
calculated function should be epoch time, which will then be converted to a
full date by Linkspace.</p>

<p>The following selection of
functions show example code:</p>

<h5>Calculated values based on text comparisons</h5>
<tt><pre>[% FILTER html %]
function evaluate (country, region)
    if country == "Greece" and region == "A" then
        return "Europe"
    elseif country == "Japan" then
        return "Asia"
    end
end
[% END %]</pre></tt>

<h5>RedAmberGreen value based on date comparisons</h5>
<tt><pre>[% FILTER html %]
function evaluate (mydaterange)
    if mydaterange == nil then
        return
    end
    if mydaterange.from.epoch < os.time() then
        return "green"
    end
    if mydaterange.from.epoch < os.time() + (86400 * 30) then
        return "amber"
    end
    return "red"
end
[% END %]</pre></tt>

<h5>Calculated values based on date comparisons</h5>
<tt><pre>[% FILTER html %]
function evaluate (mydaterange)
    if mydaterange == nil then
        return "Date range is blank"
    end
    if mydaterange.from.epoch < os.time() then
        return "Started"
    end
    if mydaterange.from.epoch < os.time() + (86400 * 30) then
        return "Starts within 30 days"
    end
    return "Not yet started"
end
[% END %]</pre></tt>

<h5>Calculated values based on tree nodes</h5>
<tt><pre>[% FILTER html %]
function evaluate (mytree)
    if mytree.parents.parent2 == nil then
        return "No second level"
    end
    return "Second level is: " .. mytree.parents.parent2
end
[% END %]</pre></tt>

<h5>Calculated values based on number comparisons</h5>
<tt><pre>[% FILTER html %]
function evaluate (cost)
    if cost == nil then
        return "No cost set"
    end
    if cost > 10 then
        return "Expensive"
    else
        return "Bargain"
    end
end
[% END %]</pre></tt>

<h5>Working out the average of several numerical values</h5>
<tt><pre>[% FILTER html %]
function evaluate (score1, score2, score3)
    total = 0
    count = 0
    if score1 ~= nil then
        total = total + score1
        count = count + 1
    end
    if score2 ~= nil then
        total = total + score2
        count = count + 1
    end
    if score3 ~= nil then
        total = total + score3
        count = count + 1
    end
    if count == 0 then
        return
    end
    return (total / count)
end
[% END %]</pre></tt>

[% END %]
